name: Continuous Integration

on:
  push:
    branches:
      - master
      - development
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches:
      - master
      - development
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Commit Tag'

jobs:
  compile:
    runs-on: ubuntu-20.04
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Check Line Endings
        uses: erclu/check-crlf@v1

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.100

      - name: Build
        run: dotnet build --configuration Release /warnaserror

      - name: Prepare Outputs
        id: vars
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Code Analysis Cache
        uses: actions/cache@v2
        with:
          path: ~/.local/share/JetBrains
          key: resharper-cache-${{ steps.vars.outputs.sha_short }}
          restore-keys: |
            resharper-cache-

      - name: Code Analysis
        run: dotnet tool install -g JetBrains.ReSharper.GlobalTools && jb inspectcode NWN.Anvil.sln -o=results.xml && cat results.xml

      - name: Parse Analysis Results
        uses: glassechidna/resharper-action@master
        with:
          report: results.xml

      - name: Analysis Result
        run: |
          ! grep "<Issue TypeId=" results.xml

  build:
    runs-on: ubuntu-20.04
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    needs: compile
    outputs:
      version: ${{ steps.vars.outputs.version }}
      tag: ${{ steps.vars.outputs.tag }}
      sha_short: ${{ steps.vars.outputs.sha_short }}
      image_repository: ${{ steps.vars.outputs.image_repository }}
      created: ${{ steps.build.outputs.created }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.100

      - name: Tag Commit
        if: github.event.inputs.tag != ''
        run: |
          git tag ${{ github.event.inputs.tag }} && git push origin ${{ github.event.inputs.tag }}

      - name: Prepare Outputs
        id: vars
        run: |
          if [[ "${{github.base_ref}}" == "master" || "${{github.ref}}" == "refs/heads/master" ]]; then
            echo "::set-output name=tag::$(git describe --tags)"
            echo "::set-output name=version::$(git describe --tags | sed 's/^v//')"
          else
            DESCRIBE=`git describe --tags --long`
            VERSION=`echo $DESCRIBE | awk '{split($0,a,"-"); print a[1]}'`
            META=`echo $DESCRIBE | awk '{split($0,a,"-"); print a[2]}'`
            BUILD=`echo $DESCRIBE | awk '{split($0,a,"-"); print a[3]}'`
            COMMIT=`echo $DESCRIBE | awk '{split($0,a,"-"); print a[4]}'`
            echo "::set-output name=version::$(echo ${VERSION}-${META}.${BUILD}.${COMMIT:1} | sed 's/^v//')"
          fi
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
          echo "::set-output name=image_repository::$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')"

      - name: Build Release Binaries
        id: build
        run: |
          dotnet build --configuration Release -p:Version=${{ steps.vars.outputs.version }} -o output
          echo "::set-output name=created::$(echo date -u +'%Y-%m-%dT%H:%M:%SZ')"

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: Binaries
          path: |
            output/
            NWN.Anvil.zip
          if-no-files-found: error

  release:
    runs-on: ubuntu-20.04
    if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/master'
    needs: build
    steps:
      - name: Download Release Artifacts
        uses: actions/download-artifact@v2
        with:
          name: Binaries

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_name: Release ${{ needs.build.outputs.version }}
          draft: false
          prerelease: false
          tag_name: ${{ needs.build.outputs.tag }}

      - name: Upload Release Binaries
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./NWN.Anvil.zip
          asset_name: NWN.Anvil.zip
          asset_content_type: application/zip

  nuget:
    runs-on: ubuntu-20.04
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    needs: build
    steps:
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.100

      - name: Download Release Artifacts
        uses: actions/download-artifact@v2
        with:
          name: Binaries

      - name: NuGet Publish
        run: dotnet nuget push output/*.nupkg --api-key ${{ secrets.NUGET_KEY }} --source https://api.nuget.org/v3/index.json
        
      - name: GitHub Publish
        run: dotnet nuget push output/*.nupkg --api-key ${{ secrets.GITHUB_TOKEN }} --source https://nuget.pkg.github.com/nwn-dotnet/index.json

  docker:
    runs-on: ubuntu-20.04
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download Release Artifacts
        uses: actions/download-artifact@v2
        with:
          name: Binaries
          
      - name: Remove NuGet packages
        run: rm output/*nupkg

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.CR_PAT }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./dockerfile
          push: true
          build-args: BINARY_PATH=/output
          labels: |
              org.opencontainers.image.title=Anvil
              org.opencontainers.image.description=Anvil is a C# library that attempts to wrap Neverwinter Script with C# niceties and contexts, instead of a collection of functions. This image contains a NWNX server configured to use Anvil.
              org.opencontainers.image.author=NWN DotNET
              org.opencontainers.image.vendor=NWN DotNET
              org.opencontainers.image.source=https://github.com/${{ github.repository }}
              org.opencontainers.image.created=${{ needs.build.outputs.created }}
              org.opencontainers.image.revision=${{ github.sha }}
              org.opencontainers.image.documentation=https://nwn-dotnet.github.io/Anvil
          tags: |
            nwndotnet/anvil:latest
            nwndotnet/anvil:${{ needs.build.outputs.version }}
            nwndotnet/anvil:${{ needs.build.outputs.sha_short }}
            ghcr.io/${{ needs.build.outputs.image_repository }}:latest
            ghcr.io/${{ needs.build.outputs.image_repository }}:${{ needs.build.outputs.version }}
            ghcr.io/${{ needs.build.outputs.image_repository }}:${{ needs.build.outputs.sha_short }}

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
